<?php

declare(strict_types=1);

namespace integration;

use DatabaseTestCase;
use verfriemelt\wrapped\_\Database\Driver\Postgres;
use verfriemelt\wrapped\_\Database\Driver\SQLite;
use verfriemelt\wrapped\_\DataModel\Attribute\Naming\LowerCase;
use verfriemelt\wrapped\_\DataModel\DataModel;
use verfriemelt\wrapped\_\DataModel\TablenameOverride;
use verfriemelt\wrapped\_\DateTime\DateTime;

class TypedDummy extends DataModel implements TablenameOverride
{
    public ?int $id = null;

    public ?string $name;

    public ?DateTime $pubtime = null;

    public $untyped;

    #[LowerCase]
    public ?DateTime $lastFoundDate = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function setId(?int $id)
    {
        $this->id = $id;
        return $this;
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(?string $name)
    {
        $this->name = $name;
        return $this;
    }

    public static function fetchTablename(): string
    {
        return 'Dummy';
    }

    public function getPubtime(): ?DateTime
    {
        return $this->pubtime;
    }

    public function setPubtime(?DateTime $pubtime)
    {
        $this->pubtime = $pubtime;
        return $this;
    }

    public function getUntyped()
    {
        return $this->untyped;
    }

    public function setUntyped($untyped)
    {
        $this->untyped = $untyped;
        return $this;
    }

    public function getLastFoundDate(): ?DateTime
    {
        return $this->lastFoundDate;
    }

    public function setLastFoundDate(?DateTime $lastFoundDate)
    {
        $this->lastFoundDate = $lastFoundDate;
        return $this;
    }
}

class DataModelTypedPropertiesTest extends DatabaseTestCase
{
    public function setUp(): void
    {
        if (static::$connection instanceof SQLite && static::$connection->getVersion() < 3.35) {
            static::markTestSkipped('returning not supported');
        }

        switch (static::$connection::class) {
            case Postgres::class:
                static::$connection->query(
                    'create table "Dummy" ( id int GENERATED BY DEFAULT AS IDENTITY primary key, name text, pubtime timestamp, untyped text, lastfounddate timestamp );'
                );
                break;
            case SQLite::class:
                if (static::$connection->getVersion() < 3.35) {
                    static::markTestSkipped('nope');
                }

                static::$connection->query(
                    'create table "Dummy" ( id integer primary key, name text, pubtime timestamp, untyped text, lastfounddate timestamp );'
                );
                break;
        }
    }

    public function tearDown(): void
    {
        static::$connection->query('drop table "Dummy" ;');
    }

    public function testSave()
    {
        $test = new TypedDummy();
        $test->setPubtime(new DateTime());
        $test->save();

        // read
        $data = TypedDummy::get(1);
        static::assertTrue(is_object($data->getPubtime()));
    }

    public function testSaveWithNull()
    {
        $test = new TypedDummy();
        $test->save();

        // read
        $data = TypedDummy::get(1);
        static::assertTrue($data->getPubtime() === null);
    }

    public function testReloadWithTime()
    {
        $test = new TypedDummy();
        $test->save();

        $secondInstance = TypedDummy::last();

        static::assertSame($test->getId(), $secondInstance->getId());

        static::assertNull($test->getLastFoundDate());
        static::assertNull($secondInstance->getLastFoundDate());

        $test->setLastFoundDate(new DateTime('2012-07-08 11:14:15.889342'));
        $test->save();

        // read updated value
        static::assertNotNull($secondInstance->reload()->getLastFoundDate(), 'should be updated with datetime');
        static::assertSame($secondInstance->getLastFoundDate()->toSqlFormat(), '2012-07-08 11:14:15.889342');

        $test->setLastFoundDate(null);
        $test->save();

        $test->reload();
        static::assertNull($test->getLastFoundDate(), 'original is null');

        // read updated value
        static::assertNull($secondInstance->reload()->getLastFoundDate(), 'should be updated to null again');
    }
}
